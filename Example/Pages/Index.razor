@page "/"
@using MudExRichTextEditor.Extensibility
@using Nextended.Core.Extensions
@using BlazorJS
@using MudExRichTextEditor.Types
@using Newtonsoft.Json
@using Nextended.Blazor.Models

<MudPaper Class="m-2">
    <MudToolBar>
        <MudCheckBox Label="Read only" @bind-Value="_readOnly" />
        <MudSpacer />
        <MudButton OnClick="@(ShowUserMentions)">Show User Mentions</MudButton>
        <MudButton OnClick="@(ShowTagMentions)">Show Tag Mentions</MudButton>
    </MudToolBar>

    <MudExRichTextEdit @ref="_editor"
                       Modules="@_modules"
                       ReadOnly="@_readOnly"
                       Immediate="@_updateValueOnChange"
                       Height="400"
                       EnableResize="true"
                       CustomUploadFunc="OnUpload"
                       Files="@_files"
                       Class="m-2"
                       ValueHtmlBehavior="@_bindingMode"
                       @bind-Value="@_value"
                       Placeholder="@_placeholder">

    </MudExRichTextEdit>

    <MudExDivider Vertical="false" />
    <MudToolBar Dense="true">
        <MudExEnumSelect SearchBox="false" Label="Value Bind Mode" Clearable="false" TEnum="GetHtmlBehavior" @bind-Value="_bindingMode"></MudExEnumSelect>
        <MudCheckBox Label="Update Value on change" @bind-Value="_updateValueOnChange" />
    </MudToolBar>


    <textarea class="m-2" style="width: 95%; height: 400px;" readonly="readonly">@_value</textarea>
</MudPaper>
@code {

    private MudExRichTextEdit _editor;
    private string _placeholder = "Write HTML content. Use @ for User mentions and # for Tag mentions";
    private GetHtmlBehavior _bindingMode = GetHtmlBehavior.SemanticHtml;
    private bool _readOnly;
    private bool _updateValueOnChange;
    private string _value = "<b>This</b> initial value will change in 2 seconds";
    private IQuillModule[] _modules;
    [Inject] private IJSRuntime _js { get; set; }

    protected override void OnInitialized()
    {
        _modules =
        [
            new QuillMentionModule<User>((c, s) => Task.FromResult(_users.Where(user => user.FullName.Contains(s, StringComparison.InvariantCultureIgnoreCase))), '@', '$').SetProperties(m => m.MentionClicked = UserMentionClicked, m => m.AfterMentionSelect = AfterUserMentionSelect),
            new QuillMentionModule<Tag>((c, s) => Task.FromResult(_tags.Where(tag => tag.Name.Contains(s, StringComparison.InvariantCultureIgnoreCase))), '#').SetProperties(m => m.MentionClicked = TagMentionClicked)
        ];
        base.OnInitialized();
    }

    private Task AfterUserMentionSelect(User obj)
    {
        Console.WriteLine(obj.FullName);
        return Task.CompletedTask;
    }

    private Task TagMentionClicked(Tag obj) => _js.AlertAsync(JsonConvert.SerializeObject(obj)).AsTask();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(2000);
            _value = $$"""<p><strong>This is the new value now </strong></p><p> </p><p></p><div class="quill-better-table-wrapper"><table class="quill-better-table" style="width: 300px;"><colgroup><col width="100"><col width="100"><col width="100"></colgroup><tbody><tr data-row="row-4qws"><td data-row="row-4qws" rowspan="1" colspan="1"><p class="qlbt-cell-line" data-row="row-4qws" data-cell="cell-70rc" data-rowspan="1" data-colspan="1"></p></td><td data-row="row-4qws" rowspan="1" colspan="1"><p class="qlbt-cell-line" data-row="row-4qws" data-cell="cell-y7os" data-rowspan="1" data-colspan="1"></p></td><td data-row="row-4qws" rowspan="1" colspan="1"><p class="qlbt-cell-line" data-row="row-4qws" data-cell="cell-w3wi" data-rowspan="1" data-colspan="1"></p></td></tr><tr data-row="row-t96w"><td data-row="row-t96w" rowspan="1" colspan="1"><p class="qlbt-cell-line" data-row="row-t96w" data-cell="cell-u5hy" data-rowspan="1" data-colspan="1"></p></td><td data-row="row-t96w" rowspan="1" colspan="1"><p class="qlbt-cell-line" data-row="row-t96w" data-cell="cell-zp3o" data-rowspan="1" data-colspan="1"></p><p class="qlbt-cell-line" data-row="row-t96w" data-cell="cell-zp3o" data-rowspan="1" data-colspan="1"></p></td><td data-row="row-t96w" rowspan="1" colspan="1"><p class="qlbt-cell-line" data-row="row-t96w" data-cell="cell-ak20" data-rowspan="1" data-colspan="1"></p></td></tr><tr data-row="row-u347"><td data-row="row-u347" rowspan="1" colspan="1"><p class="qlbt-cell-line" data-row="row-u347" data-cell="cell-dfiw" data-rowspan="1" data-colspan="1"></p></td><td data-row="row-u347" rowspan="1" colspan="1"><p class="qlbt-cell-line" data-row="row-u347" data-cell="cell-zbi5" data-rowspan="1" data-colspan="1"></p></td><td data-row="row-u347" rowspan="1" colspan="1"><p class="qlbt-cell-line" data-row="row-u347" data-cell="cell-i171" data-rowspan="1" data-colspan="1"></p></td></tr></tbody></table></div><p></p><p></p><p><a href="https://www.mudex.org">mudex.org</a></p><p></p><p>Note: {{_placeholder}}""";
            StateHasChanged();
        }
    }



    private Task UserMentionClicked(User obj) => _js.AlertAsync(JsonConvert.SerializeObject(obj)).AsTask();

    private readonly IList<UploadableFile> _files = new List<UploadableFile>()
    {
        new()
        {
            Url = "https://www.mudex.org/sample-data/logo.png",
            FileName = "logo.png",
            ContentType = "image/png"
        },
        new()
        {
            Url = "https://www.mudex.org/sample-data/sample.pdf",
            FileName = "sample.pdf",
            ContentType = "application/pdf"
        },
    };

    private static IEnumerable<User> _users = new List<User>()
    {
        new() { FirstName = "Florian", LastName = "Gilde", DateOfBirth = new DateTime(1983, 6,8)},
        new() { FirstName = "John", LastName = "Doe", DateOfBirth = new DateTime(1974, 5,11)},
        new() { FirstName = "Jane", LastName = "Doe", DateOfBirth = new DateTime(1977, 12,21) },
        new() { FirstName = "Foo", LastName = "Bar", DateOfBirth = new DateTime(2000, 1,1)  },
        new() { FirstName = "Baz", LastName = "Qux", DateOfBirth = new DateTime(1990, 2,9)  },
    };

    private static IEnumerable<Tag> _tags = new List<Tag>()
    {
        new() { Name = "Test"},
        new() { Name = "Whatever"},
        new() { Name = "Another"},
    };

    class Tag
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public override string ToString() => Name;
    }

    class User
    {
        public int Age => DateTime.Today.Year - DateOfBirth.Year - (DateOfBirth.Date > DateTime.Today.AddYears(-DateOfBirth.Year) ? 1 : 0);
        public DateTime DateOfBirth { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string FullName => $"{FirstName} {LastName}";
        public override string ToString() => FullName;
    }

    private async Task ShowUserMentions()
    {
        var allUsers = await _editor.GetModule<QuillMentionModule<User>>().GetMentionsFromContentAsync();
        await _js.AlertAsync(JsonConvert.SerializeObject(allUsers.Select(mention => mention.Data)));
    }
    private async Task ShowTagMentions()
    {
        var allTags = await _editor.GetModule<QuillMentionModule<Tag>>().GetMentionsFromContentAsync();
        await _js.AlertAsync(JsonConvert.SerializeObject(allTags.Select(mention => mention.Data)));
    }

    private Task<string> OnUpload(UploadableFile arg) => DataUrl.GetDataUrlAsync(arg.Data, arg.ContentType);

}
