@page "/"
@using MudExRichTextEditor.Extensibility
@using MudExRichTextEditor.Extensibility.Mention
@using Nextended.Core.Extensions
@using BlazorJS
@using Newtonsoft.Json

<MudCheckBox Label="Read only" @bind-Checked="_readOnly" />
<MudCheckBox Label="Update Value on change" @bind-Checked="_updateValueOnChange" />

<MudButton OnClick="@(() => { _value = "<b>MoIn</b>"; StateHasChanged(); })">Set Value to Moin</MudButton>


<MudExRichTextEdit
                   Modules="@_modules"
                   ReadOnly="@_readOnly"
                   Immediate="@_updateValueOnChange"
                   Height="400"
                   EnableResize="true"
                   Files="@_files"
                   Class="m-2"
                   @bind-Value="@_value"
                   Placeholder="Write your shit right here">

</MudExRichTextEdit>

<textarea class="m-2" style="width: 100%; height: 400px;" readonly="readonly">@_value</textarea>

@code {

    bool _readOnly;
    bool _updateValueOnChange;
    string _value = "<b>This</b> initial value will change in 2 seconds";
    private IQuillModule[] _modules;
    [Inject] 
    private IJSRuntime _js { get; set; }

    protected override void OnInitialized()
    {
        _modules = new[] {
            new QuillMentionModule<User>((c, s) => Task.FromResult(_users.Where(user => user.FullName.Contains(s, StringComparison.InvariantCultureIgnoreCase))), '@', '$', '#')
                .SetProperties(m => m.MentionClicked = MentionClicked)
        };
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(2000);
            _value = "<b>This is the new value now </b> <a href=\"https://www.mudex.org\">mudex.org</a>";
            StateHasChanged();
        }
    }



    private async void MentionClicked(User obj)
    {
        await _js.AlertAsync(JsonConvert.SerializeObject(obj));
    }

    private IList<UploadableFile> _files = new List<UploadableFile>()
    {
        new()
        {
            Url = "https://mudex.azurewebsites.net/sample-data/logo.png",
            FileName = "logo.png",
            ContentType = "image/png"
        },
        new()
        {
            Url = "https://mudex.azurewebsites.net/sample-data/sample.pdf",
            FileName = "sample.pdf",
            ContentType = "application/pdf"
        },
    };

    private static IEnumerable<User> _users = new List<User>()
    {
        new() { FirstName = "Florian", LastName = "Gilde", DateOfBirth = new DateTime(1983, 6,8)},
        new() { FirstName = "John", LastName = "Doe", DateOfBirth = new DateTime(1974, 5,11)},
        new() { FirstName = "Jane", LastName = "Doe", DateOfBirth = new DateTime(1977, 12,21) },
        new() { FirstName = "Foo", LastName = "Bar", DateOfBirth = new DateTime(2000, 1,1)  },
        new() { FirstName = "Baz", LastName = "Qux", DateOfBirth = new DateTime(1990, 2,9)  },
    };


    class User
    {
        public int Age => DateTime.Today.Year - DateOfBirth.Year - (DateOfBirth.Date > DateTime.Today.AddYears(-DateOfBirth.Year) ? 1 : 0);
        public DateTime DateOfBirth { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string FullName => $"{FirstName} {LastName}";
        public override string ToString() => FullName;
    }
}
