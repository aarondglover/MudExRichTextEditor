export function initializeMentionModule(t,i){return new n(t,i)}class n{constructor(n,t){this.options=t;this.dotnet=n;window.addEventListener("mention-hovered",this._onMentionHovered=this.onMentionHovered.bind(this));window.addEventListener("mention-clicked",this._onMentionClicked=this.onMentionClicked.bind(this))}onMentionHovered(n){n?.value?.__editorId===this.editor.id&&(n.value.data=n.value?.data||JSON.parse(n.value.__dataJson),this.dotnet.invokeMethodAsync("OnMentionHovered",n.value))}onMentionClicked(n){n?.value?.__editorId===this.editor.id&&(n.value.data=n.value?.data||JSON.parse(n.value.__dataJson),this.dotnet.invokeMethodAsync("OnMentionClicked",n.value))}getMentions(){var n=this.editor.__quill.getContents();return n.ops.filter(n=>n.insert&&n.insert.mention).map(n=>{var t=n.insert.mention;return{denotationChar:t.denotationChar,id:t.id,value:t.value,data:t.data||JSON.parse(t.__dataJson)}})}__getMentionConfig(n,t,i){return this.editor=i,{mention:{allowedChars:/^[A-Za-z\sÅÄÖåäö]*$/,dataAttributes:["id","value","denotationChar","link","target","disabled","__dataJson","__editorId"],mentionDenotationChars:this.options.denotationChars,onSelect:(n,t)=>{this.dotnet.invokeMethodAsync("OnBeforeSelect",n),t(n),this.dotnet.invokeMethodAsync("OnAfterSelect",n)},source:async(n,t,r)=>{t((await this.dotnet.invokeMethodAsync("GetSuggestions",r,n)).map(n=>(n.__editorId=i.id,n.__dataJson=JSON.stringify(n.data),n)))}}}}dispose(){window.removeEventListener("mention-hovered",this._onMentionHovered);window.removeEventListener("mention-clicked",this._onMentionClicked)}}window.MentionModule=n;